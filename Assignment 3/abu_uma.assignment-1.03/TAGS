
heap.c,1009
#undef min4,39
struct heap_node 6,51
  heap_node_t *next;next7,70
  heap_node_t *prev;prev8,91
  heap_node_t *parent;parent9,112
  heap_node_t *child;child10,135
  void *datum;datum11,157
  uint32_t degree;12,172
  uint32_t mark;13,191
#define splice_heap_node_lists(16,212
#define insert_heap_node_in_list(25,524
#define remove_heap_node_from_list(32,748
void print_heap_node(37,881
void print_heap(53,1203
void print_heap_node_list(70,1505
void heap_init(86,1704
void heap_node_delete(96,1940
void heap_delete(114,2244
heap_node_t *heap_insert(heap_insert125,2409
void *heap_peek_min(heap_peek_min145,2725
static void heap_link(150,2801
static void heap_consolidate(164,3123
void *heap_remove_min(heap_remove_min205,4056
int heap_combine(240,4590
static void heap_cut(269,5241
static void heap_cascading_cut(283,5522
int heap_decrease_key(297,5748
int heap_decrease_key_no_replace(311,5990
int32_t compare(335,6564
char *print_int(print_int340,6663
int main(349,6781

heap.h,245
# define HEAP_H2,15
typedef struct heap_node heap_node_t;11,114
typedef struct heap 13,153
  heap_node_t *min;min14,175
  uint32_t size;15,195
  int32_t (*compare)compare16,212
  void (*datum_delete)datum_delete17,269
} heap_t;18,301

macros.h,611
# define MACROS_H2,17
#  define dprintf(16,213
#  define dfprintf(17,256
#  define dprintf(19,320
#  define dfprintf(20,343
# define fieldwidth(23,382
# define exit(37,1201
# define fopen(42,1441
#  define malloc(76,3348
#  define calloc(92,4430
#  define strdup(107,5435
#  define free(117,6055
# define swap(125,6303
# define memswap(131,6415
# define structdup(137,6543
# define datacmp(144,6927
# define max2(153,7400
# define min2(160,7576
# define max 167,7752
# define min 168,7770
# define max3(170,7789
# define min3(171,7830
# define frand(173,7872
# define structdup(180,7984

rlg327.c,2644
#define DUMP_HARDNESS_IMAGES 17,279
# define rand_under(21,424
# define rand_range(25,567
# define UNUSED(26,640
typedef struct corridor_path 28,671
  heap_node_t *hn;hn29,702
  uint8_t pos[pos30,721
  uint8_t from[from31,739
  int32_t cost;32,758
} corridor_path_t;33,774
typedef enum dim 35,794
  dim_x,36,813
  dim_y,37,822
  num_dims38,831
} dim_t;39,842
typedef int16_t pair_t[pair_t41,852
#define DUNGEON_X 43,887
#define DUNGEON_Y 44,921
#define MIN_ROOMS 45,955
#define MAX_ROOMS 46,988
#define ROOM_MIN_X 47,1021
#define ROOM_MIN_Y 48,1054
#define ROOM_MAX_X 49,1087
#define ROOM_MAX_Y 50,1121
#define SAVE_DIR 51,1154
#define DUNGEON_SAVE_FILE 52,1195
#define DUNGEON_SAVE_SEMANTIC 53,1236
#define DUNGEON_SAVE_VERSION 54,1282
#define mappair(56,1317
#define mapxy(57,1374
#define hardnesspair(58,1409
#define hardnessxy(59,1476
typedef enum __attribute__ ((__packed__)) terrain_type 61,1522
  ter_debug,62,1579
  ter_wall,63,1592
  ter_wall_immutable,64,1604
  ter_floor,65,1626
  ter_floor_room,66,1639
  ter_floor_hall,67,1657
  ter_player_char68,1675
} terrain_type_t;69,1693
typedef struct room 71,1712
  pair_t position;72,1734
  pair_t size;73,1753
} room_t;74,1768
typedef struct dungeon 76,1779
  uint32_t num_rooms;77,1804
  room_t *rooms;rooms78,1826
  terrain_type_t map[map79,1843
  uint8_t hardness[hardness88,2496
  pair_t pc;89,2538
} dungeon_t;90,2551
static uint32_t in_room(92,2565
static uint32_t adjacent_to_room(108,2956
static uint32_t is_open_space(116,3217
static int32_t corridor_path_cmp(121,3316
static void dijkstra_corridor(125,3466
static void dijkstra_corridor_inv(224,7203
#define hardnesspair_inv(277,8525
static int connect_two_rooms(327,11196
static int create_cycle(346,11848
static int connect_rooms(388,13413
int gaussian[gaussian401,13606
typedef struct queue_node 409,13762
  int x,410,13790
  int x, y;410,13790
  struct queue_node *next;next411,13802
} queue_node_t;412,13829
static int smooth_hardness(414,13846
static int empty_dungeon(573,18115
static int place_rooms(592,18491
static int make_rooms(629,19678
int gen_dungeon(652,20239
int place_player(665,20383
void render_dungeon(682,20777
void delete_dungeon(713,21453
void init_dungeon(718,21510
int write_dungeon_map(723,21567
int write_rooms(736,21796
uint32_t calculate_dungeon_size(756,22215
int makedirectory(763,22462
int write_dungeon(798,23098
int read_dungeon_map(861,24593
int read_rooms(883,25190
int calculate_num_rooms(937,27007
int read_dungeon(945,27247
int read_pgm(1024,29131
void usage(1109,31534
int main(1119,31744
